name: Crane Promote Image
on:
 workflow_call:
   inputs:
     src_tag:
       type: string
       required: false
       default: develop
     extra_prod_tags:
       type: string
       required: false
       default: ""
   secrets:
     HARBOR_USERNAME_DEV:      { required: true }
     HARBOR_PASSWORD_DEV:      { required: true }
     HARBOR_USERNAME_STAGING:  { required: true }
     HARBOR_PASSWORD_STAGING:  { required: true }
     HARBOR_USERNAME_PROD:     { required: true }
     HARBOR_PASSWORD_PROD:     { required: true }
jobs:
 promote:
   name: Promote (crane)
   runs-on: ubuntu-latest
   env:
     REG:       ${{ vars.HARBOR_REGISTRY }}
     REPO_NAME: ${{ github.event.repository.name }}
     PROJ_DEV:  ${{ vars.HARBOR_PROJECT_DEVELOP }}
     PROJ_STG:  ${{ vars.HARBOR_PROJECT_STAGING }}
     PROJ_PROD: ${{ vars.HARBOR_PROJECT_PROD }}
   steps:
     - name: Install crane
       shell: bash
       run: |
         set -eux
         arch="$(uname -m)"
         case "$arch" in
           x86_64)  pkg=go-containerregistry_Linux_x86_64.tar.gz ;;
           aarch64) pkg=go-containerregistry_Linux_arm64.tar.gz ;;
           *) echo "unsupported arch: $arch"; exit 1 ;;
         esac
         curl -sSL "https://github.com/google/go-containerregistry/releases/latest/download/${pkg}" \
           | sudo tar -xz -C /usr/local/bin crane
     - name: Resolve image + digest (from DEV)
       id: meta
       shell: bash
       run: |
         set -euo pipefail
         [ -n "${REG}" ]        || { echo "Missing HARBOR_REGISTRY"; exit 1; }
         [ -n "${PROJ_DEV}" ]   || { echo "Missing HARBOR_PROJECT_DEVELOP"; exit 1; }
         [ -n "${PROJ_STG}" ]   || { echo "Missing HARBOR_PROJECT_STAGING"; exit 1; }
         [ -n "${PROJ_PROD}" ]  || { echo "Missing HARBOR_PROJECT_PROD"; exit 1; }
         IMG="$(echo "${REPO_NAME}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9._-]/-/g')"
         SRC_REF="${REG}/${PROJ_DEV}/${IMG}:${{ inputs.src_tag }}"
         DIGEST="$(crane digest "$SRC_REF")"
         echo "img=$IMG" >> "$GITHUB_OUTPUT"
         echo "digest=$DIGEST" >> "$GITHUB_OUTPUT"
         echo "Using digest $DIGEST from $SRC_REF"
     # === login y promover a STAGING ===
     - name: Promote to STAGING (:staging)
       shell: bash
       env:
         SRC_USER: ${{ secrets.HARBOR_USERNAME_DEV }}
         SRC_PASS: ${{ secrets.HARBOR_PASSWORD_DEV }}
         DST_USER: ${{ secrets.HARBOR_USERNAME_STAGING }}
         DST_PASS: ${{ secrets.HARBOR_PASSWORD_STAGING }}
       run: |
         set -euo pipefail
         SRC="@${{ steps.meta.outputs.digest }}"
         SRC_REF="${{ env.REG }}/${{ env.PROJ_DEV }}/${{ steps.meta.outputs.img }}$SRC"
         DST_REF="${{ env.REG }}/${{ env.PROJ_STG }}/${{ steps.meta.outputs.img }}:staging"
         # Login a ambos proyectos una vez
         crane auth login "${{ env.REG }}" -u "${SRC_USER}" -p "${SRC_PASS}"
         crane auth login "${{ env.REG }}" -u "${DST_USER}" -p "${DST_PASS}"
         if [ "${{ env.PROJ_DEV }}" = "${{ env.PROJ_STG }}" ]; then
           echo "Mismo proyecto: tagging :staging"
           crane tag "$SRC_REF" "staging"
         else
           echo "Copia DEV -> STG"
           crane copy "$SRC_REF" "$DST_REF"
         fi
     # === login y promover a PROD ===
     - name: Promote to PROD (:main, :latest, extras)
       shell: bash
       env:
         SRC_USER: ${{ secrets.HARBOR_USERNAME_DEV }}
         SRC_PASS: ${{ secrets.HARBOR_PASSWORD_DEV }}
         DST_USER: ${{ secrets.HARBOR_USERNAME_PROD }}
         DST_PASS: ${{ secrets.HARBOR_PASSWORD_PROD }}
       run: |
         set -euo pipefail
         SRC="@${{ steps.meta.outputs.digest }}"
         SRC_REF="${{ env.REG }}/${{ env.PROJ_DEV }}/${{ steps.meta.outputs.img }}$SRC"
         # Login a DEV y PROD
         crane auth login "${{ env.REG }}" -u "${SRC_USER}" -p "${SRC_PASS}"
         crane auth login "${{ env.REG }}" -u "${DST_USER}" -p "${DST_PASS}"
         tags="main,latest"
         [ -n "${{ inputs.extra_prod_tags }}" ] && tags="$tags,${{ inputs.extra_prod_tags }}"
         IFS=',' read -ra TAGS <<< "$tags"
         for t in "${TAGS[@]}"; do
           tag="$(echo "$t" | xargs)"; [ -z "$tag" ] && continue
           if [ "${{ env.PROJ_DEV }}" = "${{ env.PROJ_PROD }}" ]; then
             echo "Mismo proyecto: tagging :$tag"
             crane tag "$SRC_REF" "$tag"
           else
             DST_REF="${{ env.REG }}/${{ env.PROJ_PROD }}/${{ steps.meta.outputs.img }}:$tag"
             echo "Copia DEV -> PROD a :$tag"
             crane copy "$SRC_REF" "$DST_REF"
           fi
         done
     - name: Verify PROD (:main) exists (200)
       shell: bash
       env:
         USER: ${{ secrets.HARBOR_USERNAME_PROD }}
         PASS: ${{ secrets.HARBOR_PASSWORD_PROD }}
         REG:  ${{ env.REG }}
         PROJ: ${{ env.PROJ_PROD }}
         IMG:  ${{ steps.meta.outputs.img }}
       run: |
         code=$(curl -sk -u "${USER}:${PASS}" \
                -o /dev/null -w "%{http_code}" \
                "https://${REG}/v2/${PROJ}/${IMG}/manifests/main")
         echo "Manifest PROD:main -> $code"
         test "$code" = "200"